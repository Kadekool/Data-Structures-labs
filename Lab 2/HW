#include <ios>
#include <cmath>
#include <fstream>
using namespace std;

// this is reference for reading a file word by word  (Can be used for reading both stop words and unique words)

struct wordItem {
string word;
int count;
};



void printNext10(wordItem wordItemList[], int startRank, int totalWords)
{
    
    if(startRank+10<=totalWords){
        for(int i=startRank;i<startRank+10;i++){
            double mult=10000*((double)wordItemList[i].count / totalWords);
            mult=round(mult);
            mult=mult/10000;
            string store=to_string(mult);
            store=store+"00";
            cout<<store.substr(0,6)<<" - "<< wordItemList[i].word<<endl;
        }
    }else{
        for(int i=startRank;i<totalWords;i++){
            double mult=10000*((double)wordItemList[i].count / totalWords);
            mult=round(mult);
            mult=mult/10000;
            string store=to_string(mult);
            store=store+"00";
            cout<<store.substr(0,6)<<" - "<< wordItemList[i].word<<endl;
        }
    }
}



void arraySort(wordItem uniqueWords[], int length){
    for(int i=0;i<length-1;i++){
        for(int k=0;k<length-i-1;k++){
            if(uniqueWords[k].count<uniqueWords[k+1].count){
                wordItem temp=uniqueWords[k];
                uniqueWords[k]=uniqueWords[k+1];
                uniqueWords[k+1]=temp;
            }
        }
    }
}

int getTotalNumberNonStopWords(wordItem uniqueWords[], int
length){
    int count=0;
    for(int i=0;i<length;i++){
        if(uniqueWords[i].word!=uniqueWords[i+1].word){
            count++;
        }
    }
    return count;
}

void getStopWords(const char *ignoreWordFileName, string ignoreWords[])
{
    string filename=ignoreWordFileName;
    string word;
    ifstream inStream;      // stream for reading in file
    inStream.open(filename); // open the file
    int i=0;
    while (inStream >> word){
        ignoreWords[i]=word;
        i++;
    }
}

string* resize(int* arrayPtr, int &capacity)
{
	// TODO increase the capacity by two times
	int newCapacity =2*capacity;
    cout<<"Resizing from "<<capacity<<" to "<<newCapacity<<endl;

	// TODO dynamically allocate an array of size newCapacity
	string *newArray =new string [newCapacity];

	// TODO copy all data from oldArray to newArray
    for(int i=0;i<capacity;i++){
        *(newArray+i)=*(arrayPtr+i);
    }

	// TODO free the memory associated with oldArray
    delete [] arrayPtr;
	capacity = newCapacity;

	return newArray;

}

bool isStopWord(string word, string ignoreWords[])
{
    for(int i=0;i<50;i++){
        if(ignoreWords[i]==word){
            return true;
        }   
    }
    return false;
}

int main(int argc, char* argv[] ){
    string filename=string argv[2];
    ifstream inStream;      // stream for reading in file
    inStream.open(filename); // open the file
    int capacity=100;
    string *Arr = new wordItem[capacity];
    string Ignore[50]; 
    string word;
    int count=0;
    const char *ignoreWordFileName = argv[3];
    getStopWords(ignoreWordFileName, Ignore);
    while (inStream >> word ){
        wordItem W={word,count};
        Arr[i]=W;
        count++;
        if(count==capacity){
            Arr=resize(Arr,capacity);
        }
    // get stop words / unique words into array
    }
    inStream.close(); // close the file
}

